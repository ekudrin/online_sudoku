class Sudoku:
    cell_values = {
        "1": "M9.36,33.65H6.19V6.38H0V4.08H.62A6.88,6.88,0,0,0,4.94,3,4.36,4.36,0,0,0,6.53,0H9.36Z",
        "2": "M21.79,34.27H.14V33a11.86,11.86,0,0,1,1.23-5.57A12.64,12.64,0,0,1,4.44,23.5,50,50,0,0,1,9.31,20l2.83-1.78a32.81,32.81,0,0,0,3.46-2.47,9.27,9.27,0,0,0,2.18-2.62,6.89,6.89,0,0,0,.84-3.45,6.39,6.39,0,0,0-2-5,7.57,7.57,0,0,0-5.28-1.83A7.21,7.21,0,0,0,5.93,5a10,10,0,0,0-2.62,6L0,10.7A12.38,12.38,0,0,1,3.77,2.78,10.91,10.91,0,0,1,11.33,0a13.15,13.15,0,0,1,5.4,1.08,8.8,8.8,0,0,1,3.84,3.24A9.27,9.27,0,0,1,22,9.5a9.46,9.46,0,0,1-1.05,4.61,11.63,11.63,0,0,1-2.57,3.22,37.13,37.13,0,0,1-4.1,2.93l-.51.28q-.25.15-.6.39l-2.54,1.73a26.36,26.36,0,0,0-5.21,4.2,6.5,6.5,0,0,0-1.8,4.48H21.79Z",
        "3": "M16.78,13.92a5.84,5.84,0,0,0,2-4.7,5.75,5.75,0,0,0-2-4.68,7.62,7.62,0,0,0-5.07-1.71A6.92,6.92,0,0,0,6.86,4.54,8.23,8.23,0,0,0,4.51,9.65L1.25,9.22A10.26,10.26,0,0,1,4.63,2.38,10.55,10.55,0,0,1,11.71,0a12.57,12.57,0,0,1,5.21,1.06A8.77,8.77,0,0,1,20.71,4.2a8.67,8.67,0,0,1,1.42,5,7.45,7.45,0,0,1-1.42,4.53,8.5,8.5,0,0,1-3.77,2.91v.09a9.94,9.94,0,0,1,4.61,3.17,8.12,8.12,0,0,1,1.73,5.23,9,9,0,0,1-1.56,5.33,9.47,9.47,0,0,1-4.2,3.31,14.85,14.85,0,0,1-5.81,1.11,12.13,12.13,0,0,1-7.94-2.62A10.82,10.82,0,0,1,0,24.82l3.31-.39A9.06,9.06,0,0,0,6,30.05a8.09,8.09,0,0,0,5.69,2.06,9,9,0,0,0,5.88-1.89,6.23,6.23,0,0,0,2.33-5.07,6,6,0,0,0-2.33-5,9.56,9.56,0,0,0-6-1.8h-3V15.65h3.12A7.66,7.66,0,0,0,16.78,13.92Z",
        "4": "M24,21.7v2.68H19.54v9.27H16.37V24.38H0V21.65L14.74,0h4.8V21.7Zm-20.59,0h13V2.64h-.1L3.36,21.6Z",
        "5": "M17.06,12.31a10,10,0,0,1,4,3.94,12.59,12.59,0,0,1,1.51,6.41,12.58,12.58,0,0,1-1.51,6.4A9.7,9.7,0,0,1,16.94,33a12.61,12.61,0,0,1-5.71,1.29A11.75,11.75,0,0,1,3.86,32,10.74,10.74,0,0,1,0,25.82l3.36-.38a8,8,0,0,0,2.78,4.42,8,8,0,0,0,5.09,1.63,8,8,0,0,0,4-1,7.32,7.32,0,0,0,2.88-3,10,10,0,0,0,1.08-4.82q0-4.28-2.28-6.56a7.66,7.66,0,0,0-5.64-2.28,10.11,10.11,0,0,0-4.32.92A9.56,9.56,0,0,0,3.5,17.38H.43L1.92,0H20.5V2.93H4.61l-1,11.28h.09A8.14,8.14,0,0,1,7,11.83,11.88,11.88,0,0,1,11.62,11,11.34,11.34,0,0,1,17.06,12.31Z",
        "6": "M17.93,14.21a9.8,9.8,0,0,1,4,3.69,10.84,10.84,0,0,1,1.51,5.81,11.06,11.06,0,0,1-1.58,6,10.63,10.63,0,0,1-4.1,3.84,11.4,11.4,0,0,1-5.36,1.32q-6.72,0-10-5.14A14.31,14.31,0,0,1,.53,24.53,42.62,42.62,0,0,1,0,17.42Q0,7.88,3.58,3.94A11.41,11.41,0,0,1,12.38,0a10.74,10.74,0,0,1,6.46,2A10.17,10.17,0,0,1,22.7,7.63l-3.36.48A7.72,7.72,0,0,0,16.82,4.3a6.65,6.65,0,0,0-4.44-1.56A8.05,8.05,0,0,0,6,5.86Q3.36,9,3.36,17.18v.68h.1a9.47,9.47,0,0,1,3.88-3.65A11.53,11.53,0,0,1,12.62,13,11.66,11.66,0,0,1,17.93,14.21Zm-1.75,17A7.46,7.46,0,0,0,19,28.32a8.78,8.78,0,0,0,1-4.37,8.8,8.8,0,0,0-1-4.37,7.6,7.6,0,0,0-2.83-2.88,7.77,7.77,0,0,0-3.89-1,8.9,8.9,0,0,0-4.25,1,7.94,7.94,0,0,0-3.1,2.9A8.15,8.15,0,0,0,3.79,24a8.15,8.15,0,0,0,1.15,4.32A8,8,0,0,0,8,31.18a9,9,0,0,0,4.25,1A7.78,7.78,0,0,0,16.18,31.2Z",
        "7": "M21.6,1.58a10.48,10.48,0,0,1-1.06,4.61,50,50,0,0,1-3.36,5.71q-2.2,3.31-3.64,6a29.88,29.88,0,0,0-2.45,6.21,29.19,29.19,0,0,0-1,7.9v1.68H6.77V31.87a29.81,29.81,0,0,1,1.1-8.3A34,34,0,0,1,10.49,17c1-1.87,2.29-4,3.86-6.36C15.57,8.72,16.46,7.25,17,6.19A14.42,14.42,0,0,0,18.34,3V2.93H0V0H21.6Z",
        "8": "M11.81,34.94a14.73,14.73,0,0,1-5.95-1.17,10,10,0,0,1-4.28-3.46A9.34,9.34,0,0,1,0,24.86a8.71,8.71,0,0,1,1.8-5.49,9.62,9.62,0,0,1,4.82-3.29v-.14a8.54,8.54,0,0,1-3.81-2.88A7.15,7.15,0,0,1,1.39,8.69,7.68,7.68,0,0,1,2.83,4,9.13,9.13,0,0,1,6.67,1a12.83,12.83,0,0,1,5.14-1A12.82,12.82,0,0,1,17,1a9.16,9.16,0,0,1,3.81,3,7.68,7.68,0,0,1,1.44,4.66,7.2,7.2,0,0,1-1.41,4.37A8.62,8.62,0,0,1,17,15.94v.14a9.45,9.45,0,0,1,4.85,3.29,8.81,8.81,0,0,1,1.78,5.49A9.27,9.27,0,0,1,22,30.31a9.94,9.94,0,0,1-4.27,3.46A14.76,14.76,0,0,1,11.81,34.94Zm0-17.37a9.07,9.07,0,0,0-6,2,6.6,6.6,0,0,0-2.4,5.35,6.58,6.58,0,0,0,2.4,5.35,9.07,9.07,0,0,0,6,2,9.07,9.07,0,0,0,6-2,6.58,6.58,0,0,0,2.4-5.35,6.6,6.6,0,0,0-2.4-5.35A9.07,9.07,0,0,0,11.81,17.57Zm0-14.88a8,8,0,0,0-3.51.77A6.39,6.39,0,0,0,5.71,5.62a5.41,5.41,0,0,0-1,3.16,5.4,5.4,0,0,0,2.07,4.35,7.6,7.6,0,0,0,5,1.7,8,8,0,0,0,3.53-.77,6.59,6.59,0,0,0,2.59-2.16,5.28,5.28,0,0,0,1-3.12,5.41,5.41,0,0,0-1-3.14,6.51,6.51,0,0,0-2.62-2.18A8,8,0,0,0,11.81,2.69Z",
        "9": "M5.52,20.69a9.84,9.84,0,0,1-4-3.7A10.82,10.82,0,0,1,0,11.18a11.14,11.14,0,0,1,1.58-6A10.63,10.63,0,0,1,5.71,1.32,11.54,11.54,0,0,1,11.09,0q6.72,0,10,5.14a14.31,14.31,0,0,1,1.87,5.23,41.46,41.46,0,0,1,.53,7.1Q23.47,27,19.9,31a11.46,11.46,0,0,1-8.81,3.94,10.83,10.83,0,0,1-6.46-2A10.19,10.19,0,0,1,.77,27.26l3.36-.48A7.84,7.84,0,0,0,6.65,30.6a6.65,6.65,0,0,0,4.44,1.56A8.07,8.07,0,0,0,17.5,29q2.61-3.12,2.61-11.33V17H20a9.5,9.5,0,0,1-3.87,3.65,11.41,11.41,0,0,1-5.3,1.25A11.77,11.77,0,0,1,5.52,20.69ZM7.3,3.7A7.42,7.42,0,0,0,4.46,6.58a8.74,8.74,0,0,0-1,4.36,8.78,8.78,0,0,0,1,4.37A7.42,7.42,0,0,0,7.3,18.19a7.65,7.65,0,0,0,3.84,1,9,9,0,0,0,4.29-1,7.93,7.93,0,0,0,4.25-7.23,7.9,7.9,0,0,0-4.25-7.22,9,9,0,0,0-4.29-1A7.55,7.55,0,0,0,7.3,3.7Z"
    }

    def solve(self, board):
        find = self.find_empty(board)
        if not find:
            return True
        else:
            row, col = find

        for i in range(1, 10):
            if self.is_valid(board, i, (row, col)):
                board[row][col] = i

                if self.solve(board):
                    return True

                board[row][col] = 0

        return False

    def is_valid(self, board, num, pos):
        # Check row
        for i in range(len(board[0])):
            if board[pos[0]][i] == num and pos[1] != i:
                return False

        # Check column
        for i in range(len(board)):
            if board[i][pos[1]] == num and pos[0] != i:
                return False

        # Check box
        box_x = pos[1] // 3
        box_y = pos[0] // 3

        for i in range(box_y * 3, box_y + 3):
            for j in range(box_x * 3, box_x * 3 + 3):
                if board[i][j] == num and (i, j) != pos:
                    return False

        return True

    def find_empty(self, board):
        for i in range(len(board)):
            for j in range(len(board[0])):
                if board[i][j] == 0:
                    return (i, j)  # row, col
        return None
